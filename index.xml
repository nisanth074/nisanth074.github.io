<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nisanth&#39;s Blog</title>
    <link>https://nisanth074.github.io/</link>
    <description>Recent content on Nisanth&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Apr 2016 14:58:53 +0530</lastBuildDate>
    
	<atom:link href="https://nisanth074.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Can you be a different person at work?</title>
      <link>https://nisanth074.github.io/posts/can-you-be-a-different-person-at-work/</link>
      <pubDate>Sun, 17 Apr 2016 14:58:53 +0530</pubDate>
      
      <guid>https://nisanth074.github.io/posts/can-you-be-a-different-person-at-work/</guid>
      <description>I like attending conferences. I enjoy watching great conference speakers. They are interesting. Great speakers convey a story, they put on a show.
I wondered how they did it. I started asking people. I received many answers. This one stood out
 Great speakers are just being themselves on stage. They are interesting off stage, so they are interesting on stage
 This answer was from a colleague.
Fast forward a year …</description>
    </item>
    
    <item>
      <title>Automating ssh key deployment in Rails apps with Ansible</title>
      <link>https://nisanth074.github.io/posts/ssh-key-deployment-ansible/</link>
      <pubDate>Wed, 05 Aug 2015 14:58:53 +0530</pubDate>
      
      <guid>https://nisanth074.github.io/posts/ssh-key-deployment-ansible/</guid>
      <description>Reposted from SupportBee&amp;rsquo;s Dev Blog
 I decided to automate ssh key management on servers last week, after having done it manually for a couple of days. I typically used Capistrano to automate server configuration but had been searching for a tool which had a declarative style and works over SSH (just like Capistrano). Fortunately, I found Ansible via a friend’s tweet.
Ansible is written in python and easiest way to install it is with pip (a package manager for python packages).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://nisanth074.github.io/about/</link>
      <pubDate>Fri, 03 Jul 2015 13:52:01 +0530</pubDate>
      
      <guid>https://nisanth074.github.io/about/</guid>
      <description>About me Hello, I&amp;rsquo;m Nisanth. I&amp;rsquo;m a Ruby Developer at SupportBee. I enjoy exploring programming languages and understand the design choices behind them. I&amp;rsquo;m active on Twitter and Github.
Site&amp;rsquo;s stack Built with Hugo. Hosted on Github Pages. Theme borrowed from Pocket app and Jekyll&amp;rsquo;s Kactus Theme. Source code in available on Github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://nisanth074.github.io/library/</link>
      <pubDate>Fri, 03 Jul 2015 13:52:01 +0530</pubDate>
      
      <guid>https://nisanth074.github.io/library/</guid>
      <description>Inspired by colleagues, I began to prefer books over blogposts, tutorials and other semi-structured content to learn new things. The following is a list of some wonderful books that have been recommended to me by colleagues and friends in the past two years.
Productivity  Your Brain at Work  Business  Zero to One  Development  The RSpec Book Clean Code: A Handbook of Agile Software Craftsmanship  Ruby/Rails Development  Programming Ruby, also known as &amp;ldquo;The Pickaxe book&amp;rdquo; The Rails 3 Way  JavaScript Development  JavaScript: The Good Parts Building Single Page Web Apps with Backbone.</description>
    </item>
    
    <item>
      <title>Bulk retry failed jobs in Resque 1.x</title>
      <link>https://nisanth074.github.io/posts/bulk-retry-failed-jobs-resque/</link>
      <pubDate>Thu, 22 May 2014 14:58:53 +0530</pubDate>
      
      <guid>https://nisanth074.github.io/posts/bulk-retry-failed-jobs-resque/</guid>
      <description>Reposted from SupportBee&amp;rsquo;s Dev Blog
 Retrying failed jobs via Resque’s web interface is cumbersome, especially when there are more than a handful of them. So I quickly wrote down a small script that’ll do it for me.
Open a rails console and copy paste the below snippet
def retry_if(&amp;amp;should_retry) redis = Resque.redis (0...Resque::Failure.count).each do |i| serialized_job = redis.lindex(:failed, i) job = Resque.decode(serialized_job) next unless should_retry.(job) Resque::Failure.requeue(i) end end To retry a subset of failed jobs, say email notifications that have failed because of smtp errors</description>
    </item>
    
    <item>
      <title>Selectively remove failed jobs from Resque 1.x</title>
      <link>https://nisanth074.github.io/posts/selectively-remove-failed-jobs-resque/</link>
      <pubDate>Mon, 12 May 2014 14:58:53 +0530</pubDate>
      
      <guid>https://nisanth074.github.io/posts/selectively-remove-failed-jobs-resque/</guid>
      <description>Copy the code snippet below and paste it in a rails console.
def delete_if redis = Resque.redis (0...Resque::Failure.count).each do |i| string = redis.lindex(:failed, i) break if string.nil? job = Resque.decode(string) remove = yield job next unless remove redis.lrem(:failed, 1, string) redo end end To selectively delete a subset of failed jobs, say we wish delete all push notification jobs that have failed because of http errors, run
delete_if do |job| job[&amp;#39;payload&amp;#39;][&amp;#39;class&amp;#39;] == &amp;#39;SendPushNotification&amp;#39; &amp;amp;&amp;amp; job[&amp;#39;exception&amp;#39;] == &amp;#39;Pusher::HTTPError&amp;#39; end</description>
    </item>
    
    <item>
      <title>Remove ActiveRecord model from ElasticSearch index with tire gem</title>
      <link>https://nisanth074.github.io/posts/remove-activerecord-model-elasticsearch/</link>
      <pubDate>Sat, 26 Apr 2014 14:58:53 +0530</pubDate>
      
      <guid>https://nisanth074.github.io/posts/remove-activerecord-model-elasticsearch/</guid>
      <description>Say, there is an ActiveRecord model Ticket
class Ticket &amp;lt; ActiveRecord::Base include Tire::Model::Search # Tire gem setup... end and a Ticket document in ElasticSearch that you wish to delete. To delete the document, copy paste the following code in a rails console
ticket_id = 1234 document_id = ticket_id Ticket.index.remove(Ticket.document_type, document_id)
This script is quite handy in situations where an ActiveRecord model was deleted from the database but the corresponding document wasn&amp;rsquo;t deleted in Elasticsearch (due to network issues etc.</description>
    </item>
    
  </channel>
</rss>